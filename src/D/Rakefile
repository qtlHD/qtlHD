#! /usr/bin/rake
#
# Rake file for building qtlHD binaries, libraries and unit tests. 
#
# Examples:
#
#   rake                 # default build and test
#   rake -T              # list all defined rake tasks
#   rake clean
#   rake build          
#   rake run
#   rake test
#   rake DEBUG=TRUE csv2xgap  # build utility with debug information
#   rake read_csv             # CSV unit tests
#   rake DEBUG=TRUE read_csvr # CSVr unit tests with debug information
#   etc. etc. (see rake -T).

require 'rake/clean'

def windows?
  return RUBY_PLATFORM =~ /(:?mswin|mingw)/
end

BUILD_SHLIBS = false  # static/shared library targets
PROG = 'read_qtab'    # this will change to a utility
BINARIES = ['scanone' ]
TESTS = [ :test_qtab ]

D_TEST  = "-unittest"
d_test  = D_TEST
debug   = false
D_DEBUG = "-gc -debug"
d_debug = ""

if ARGV.index("DEBUG=TRUE")
  debug = true
  d_debug = D_DEBUG
  print "Adding debug information!\n"
end
if ARGV.index("RELEASE=TRUE")
  release = true
  debug = false
  d_test = ""
end

arch_dfiles = Dir.glob("./arch/*.d")
core_dfiles = Dir.glob("./qtl/core/*.d") 
map_dfiles  = Dir.glob("./qtl/core/map/*.d")
hmm_dfiles  = Dir.glob("./qtl/core/hmm/*.d")
util_dfiles = Dir.glob("./qtl/core/util/*.d")
lapack_dfiles = Dir.glob("./math/lapack/*.d")
if windows? then
lapack_dfiles += Dir.glob("./arch/*.d") + Dir.glob("./qtl/plugins/renv/*.d")
end
csv_dfiles = Dir.glob("./qtl/plugins/csv/*.d")
csvr_dfiles = Dir.glob("./qtl/plugins/csvr/*.d") + [ './qtl/core/mqm/matrix.d' ]
qtab_read_dfiles = ["./qtl/plugins/qtab/read_qtab.d"]
qtab_write_dfiles = ["./qtl/plugins/qtab/write_qtab.d"]
qtab_dfiles = qtab_read_dfiles + qtab_write_dfiles
xgap_dfiles = Dir.glob("./qtl/plugins/xgap/*.d") + csv_dfiles
renv_dfiles = Dir.glob("./qtl/plugins/renv/*.d")
scanone_dfiles = Dir.glob("./qtl/core/scanone/*.d")
mqm_dfiles = Dir.glob("./qtl/core/mqm/*.d")
example_dfiles = Dir.glob("./example/*.d")
deprecated_dfiles = Dir.glob("./qtl/core/deprecate/*.d") + 
  Dir.glob("./qtl/plugins/deprecate/*.d")
main_dfile = ["test/main.d"]

all_core_dfiles = core_dfiles + map_dfiles + hmm_dfiles + util_dfiles + qtab_read_dfiles
all_dfiles = all_core_dfiles + 
             csv_dfiles + csvr_dfiles + qtab_dfiles + xgap_dfiles +
             deprecated_dfiles

def shlib_suffix
  if windows? then
    return "dll"
  else
    return "so"
  end
end

def shlib_prefix
  if windows? then
    return ""
  else
    return "lib"
  end
end

LIB_EXT =       # set build target library file name
  if BUILD_SHLIBS
    shlib_suffix
  else
    if(windows?) then 'lib' else 'a' end 
  end

LIB_QTAB = shlib_prefix + 'qtab.' + LIB_EXT

# Unix files
CLEAN.include('*.o')
CLEAN.include('*.dep')
CLEAN.include('*.deps')
# Win32 files
CLEAN.include('*.obj','*.exe','*.map')
CLEAN.include('test.*', '*.xbin')
# Lib files
CLEAN.include("*.#{LIB_EXT}")
# Created test executabels
clean_exe_list = Dir.glob("*").find_all { |fn| File.executable?(fn) and !File.directory?(fn) }
CLEAN.include(clean_exe_list)
CLEAN.include(Dir.glob("../../build/*"))

# The compile targets

lib_list = { 
  LIB_QTAB => { :path => './qtl/plugins/qtab', :list => core_dfiles + qtab_read_dfiles },
}

exe_list = { 
  'read_csv' => { :path => './qtl/plugins/csv', :list => core_dfiles + csv_dfiles + example_dfiles + main_dfile },
  'read_csvr' => { :path => './qtl/plugins/csvr', :list => all_core_dfiles + csvr_dfiles + example_dfiles + main_dfile },
  'read_qtab' => { :path => './qtl/plugins/qtab', :list => core_dfiles + qtab_read_dfiles + main_dfile },
  'write_qtab' => { :path => './qtl/plugins/qtab', :list => core_dfiles + qtab_write_dfiles + csv_dfiles + example_dfiles + main_dfile },
  'read_xgapbin' => { :path => './qtl/plugins/xgap', :list => all_core_dfiles + xgap_dfiles + csvr_dfiles + main_dfile },
  'write_xgapbin' => { :path => './qtl/plugins/xgap', :list => all_core_dfiles + xgap_dfiles + csvr_dfiles + main_dfile },
  'test_scanone' => { :path => './test/scanone', :list => ['./test/scanone/test_scanone_f2.d'] + ['./test/scanone/test_scanone_bc.d'] + all_core_dfiles + scanone_dfiles + main_dfile + lapack_dfiles + util_dfiles},
  'test_lapack' => { :path => './test/lapack', :list => [ './test/lapack/test_lapack.d'] + renv_dfiles + arch_dfiles },
  'test_rlib' => { :path => './test/rlib', :list => [ './test/rlib/test_rlib.d'] + renv_dfiles + arch_dfiles },
  'test_mqmscan' => { :path => './test/mqm', :list => core_dfiles + mqm_dfiles + renv_dfiles + main_dfile},
  'test_hmm' => { :path => './test/hmm', :list => ['./test/hmm/test_hmm_f2.d'] + ['./test/hmm/test_hmm_bc.d'] + all_core_dfiles + qtab_read_dfiles + main_dfile },
}

build_list = { 
  'scanone' => { path: './qtl/main', list: ['./qtl/main/scanone.d'] + all_core_dfiles }
}

lib_list.each do | fn, attr |
  path = attr[:path]
  list = attr[:list]
  file fn => list do
    sh "dmd -lib -O -of#{fn} #{list.join(' ')}"
  end
end

exe_list.each do | fn, attr | 
  path = attr[:path]
  list = attr[:list]
  source = path + '/' + fn + '.d'
  list << source 
  list.uniq!

  if fn =~ /test/i
    desc fn
  else
    desc "Test "+fn
  end
  file fn => list do
    sh "dmd #{d_debug} #{d_test} -of#{fn} #{list.join(' ')}"
    if debug
      print "RUNNING the debugger, to continue the test, type 'run'\n"
      sh 'gdb '+fn
    else
      sh './'+fn
    end
  end
end

# Build independent binaries and copy result to ../../build
build_list.each do | fn, attr |
  path = attr[:path]
  list = attr[:list]

  desc "Binary "+fn
  file fn => list do
    if release
      sh "dmd -J../.. -release -O -of#{fn} #{list.join(' ')}"
    else
      sh "dmd -J../.. #{d_debug} #{d_test} -of#{fn} #{list.join(' ')}"
      sh './'+fn
    end
    if debug
      print "RUNNING the debugger, to continue the test, type 'run'\n"
      sh 'gdb '+fn
    else
      FileUtils::cp fn,'../../build', preserve: true
    end
  end
end


file "csv2xgap" => core_dfiles do
  sh "dmd -ofcsv2xgap #{core_dfiles} #{core_iofiles} #{core_xgapfiles} qtl/util/csv2xgap.d qtl/plugins/xgap/write_xgapbin.d"
end

# ---- Standard tasks

desc "Default builds and tests #{PROG}"
task :default => [:build_libs, :build, :test]

desc "Build default libraries"
task :build_libs => [ LIB_QTAB ]

desc "Build default binaries"
task :build => BINARIES 

desc "Create tags (exurberant tags)"
task :tags => [] do
  print "Creating tags!"
  list = all_dfiles 
  sh "dmd -c -Xftags.json #{list.join(' ')}"
  sh "rdmd ../../scripts/d2tags . > tags"
end

desc "Run #{PROG}"
task :run => [PROG] do
  print "Running #{PROG}\n"
  sh "./#{PROG}" 
end

desc "Test #{PROG}"
task :test => [PROG] do
  print "Testing #{PROG}\n"
  sh "./#{PROG}" 
end

# ---- Unit tests

desc "Test XGAP"
task :test_xgap => [ 'write_xgapbin', 'read_xgapbin' ] do 
  sh "./write_xgapbin"
  sh "./read_xgapbin"
end

desc "Test qtlHD qtab"
task :test_qtab => [ 'read_qtab', 'write_qtab' ] do
  sh "./write_qtab" 
  sh "./read_qtab" 
end

desc "Test CSV"
task :test_csv => [ :read_csv ]

desc "Test CSVr"
task :test_csvr => [ :read_csvr ]

desc "Test all"

task :test_all => [:clean, :test_csv, :test_csvr, :test_qtab, :test_hmm, :test_lapack, :test_rlib, :test_scanone]

